#!/usr/bin/env ruby

# Copyright 2015 Trustees of Dartmouth College
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

require_relative '../lib/dcl_wc_metadata_api'

# Define command-line options and documentation
SUB_COMMANDS = %w(read create update set unset check validate config)
global_opts = Clop::options do
  banner <<-EOS
dcl-wc-metadata-api, DCL-local WorldCat Metadata API tools.

Usage:
  dcl-wc-metadata-api [options] <command> <input>
  dcl-wc-metadata-api config [<name>=<value> ...]

Commands include:
  read      Download record(s) from OCLC
  create    Upload new record(s) to OCLC and set holding(s)
  update    Upload modified record(s) to OCLC
  set       Set OCLC holdings
  unset     Unset OCLC holdings
  check     Get current OCLC number
  validate  Perform full OCLC validation (e.g. before create or update)
  config    Set or display WSKey credentials and API preferences

Before any other commands, config must be used to set the following fields:\
 key, secret, principalID, principalDNS, schema, holdingLibraryCode, instSymbol.\
 Without any arguments, config displays the fields currently set.

For definitions, see\
 http://www.oclc.org/developer/develop/web-services/worldcat-metadata-api/bibliographic-resource.en.html.

For read, set, unset, or check, <input> is one or more record numbers (separated\
 only by a comma) or the path of a file containing a list of record numbers, one\
 per line. For create, update, or validate, <input> is the path of a valid\
 MARCXML file containing one or more records.

Options include:
EOS
  opt :verbose, "Print success status for each item", :short => "-v"
  opt :debug, "Save request URL and body to output log", :short => "-d"
  opt :prefix, "Append string to output filenames", :type => String,
    :short => "-p"
  stop_on SUB_COMMANDS
end

input = ""

# Parse command-line input
cmd = ARGV.shift
cmd_opts = case cmd

  when nil
    Clop::die "No command given. Select one of: " + SUB_COMMANDS.join(", ")

  # Set or display credentials
  when "config"
    config_cmd = ARGV

    DCL_WC_METADATA_API.set_credentials(config_cmd) if !config_cmd.empty?
    DCL_WC_METADATA_API.display_credentials

  # Read API operation
  when "read"
    Clop::die "OCLC record number(s) required" if ARGV.empty?
    input = ARGV.shift
    manager = DCL_WC_METADATA_API::Manager.new(global_opts)
    manager.read(input)

  # Create API operation
  when "create"
    Clop::die "Filename of MARCXML record(s) required" if ARGV.empty?
    input = Nokogiri::XML(File.read(ARGV.shift))
    count = input.xpath("count(//marc:record)",
      "marc" => "http://www.loc.gov/MARC21/slim"
    )
    Clop::die "No well-formed MARCXML records found as input" if count == 0
    manager = DCL_WC_METADATA_API::Manager.new(global_opts)
    manager.create(input)

  # Update API operation
  when "update"
    Clop::die "Filename of MARCXML record(s) required" if ARGV.empty?
    input = Nokogiri::XML(File.read(ARGV.shift))
    count = input.xpath("count(//marc:record)",
      "marc" => "http://www.loc.gov/MARC21/slim"
    )
    Clop::die "No well-formed MARCXML records found as input" if count == 0
    manager = DCL_WC_METADATA_API::Manager.new(global_opts)
    manager.update(input)

  # Set API operation
  when "set"
    Clop::die "OCLC record number(s) required" if ARGV.empty?
    input = ARGV.shift
    manager = DCL_WC_METADATA_API::Manager.new(global_opts)
    manager.set(input)

  # Unset API operation
  when "unset"
    Clop::die "OCLC record number(s) required" if ARGV.empty?
    input = ARGV.shift
    manager = DCL_WC_METADATA_API::Manager.new(global_opts)
    manager.unset(input)

  # Check API operation
  when "check"
    Clop::die "OCLC record number(s) required" if ARGV.empty?
    input = ARGV.shift
    manager = DCL_WC_METADATA_API::Manager.new(global_opts)
    manager.check(input)

  # Validate API operation
  when "validate"
    Clop::die "Filename of MARCXML record(s) required" if ARGV.empty?
    input = Nokogiri::XML(File.read(ARGV.shift))
    count = input.xpath("count(//marc:record)",
      "marc" => "http://www.loc.gov/MARC21/slim"
    )
    Clop::die "No well-formed MARCXML records found as input" if count == 0
    manager = DCL_WC_METADATA_API::Manager.new(global_opts)
    manager.validate(input)

  # Any other command
  else
    Clop::die "Unknown subcommand #{cmd.inspect}. Select one of: " + \
    SUB_COMMANDS.join(", ")

  end
